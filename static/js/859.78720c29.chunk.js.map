{"version":3,"file":"static/js/859.78720c29.chunk.js","mappings":"yNAEaA,EAAYC,EAAAA,EAAAA,IAAH,2GAMTC,EAAcD,EAAAA,EAAAA,IAAH,yFAOXE,EAAYF,EAAAA,EAAAA,IAAH,+EAMTG,EAAaH,EAAAA,EAAAA,GAAH,+U,mBCevB,EA1BkB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAOG,KAAI,SAAAC,GAAK,OACf,SAACP,EAAD,WACE,UAAC,KAAD,CAAMQ,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAxC,WACE,SAACH,EAAD,CACEW,IACEL,EAAMM,YAAN,UACOC,EAAAA,IADP,OACwBP,EAAMM,aAC1B,sCAENE,MAAM,MACNC,OAAO,MACPC,IAAKV,EAAMW,SAEb,SAAChB,EAAD,UAAaK,EAAMW,YAZLX,EAAME,GADT,KAmBtB,C,wMClCM,IAAMU,EAAU,mCACVC,EAAW,gCAEXC,EAAgB,mCAChBP,EAAiB,mCACjBQ,EAAgB,uCAEhBC,EAAgB,qBAIhBC,EAAmB,c,qJCkBhC,EAzBa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOtB,EAAP,KAAeuB,EAAf,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,8GAEEC,EAAAA,EAAAA,MAFF,OAEVC,EAFU,OAGhBC,QAAQC,IAAIF,GACZJ,EAAUI,GAJM,gDAMhBC,QAAQC,IAAI,KAAMC,SANF,yDAAH,qDASjBL,GACD,GAAE,KAGD,6BACE,qCACA,gBAAKhB,IAAI,sCAAsCK,IAAI,MACnD,SAAC,IAAD,CAAWd,OAAQA,MAGxB,C,oLCjBM,SAAe0B,IAAtB,+B,aAAO,O,oBAAA,6GAEoBK,EAAAA,EAAAA,IAAA,UAClBd,EAAAA,IADkB,OACPG,EAAAA,GADO,oBACkBJ,EAAAA,KAHtC,cAEGgB,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHN,QAAQO,MAAR,MAPG,gFAwBA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,gGAEoBN,EAAAA,EAAAA,IAAA,UAClBd,EAAAA,GADkB,iBACDoB,EADC,oBACkBrB,EAAAA,GADlB,oBAFpB,cAEGgB,EAFH,yBAKIA,EAASC,MALb,gCAOHL,QAAQO,MAAR,MAPG,gFAYA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAqCC,GAArC,gGAEoBR,EAAAA,EAAAA,IAAA,UAClBd,EAAAA,IADkB,OACPI,EAAAA,GADO,oBACqBL,EAAAA,GADrB,kBACsCuB,IAH1D,cAEGP,EAFH,yBAKIA,EAASC,KAAKC,SALlB,gCAOHN,QAAQO,MAAR,MAPG,gFAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,gGAEoBN,EAAAA,EAAAA,IAAA,UAClBd,EAAAA,GADkB,iBACDoB,EADC,4BAC0BrB,EAAAA,GAD1B,oBAFpB,cAEGgB,EAFH,yBAKIA,EAASC,KAAKQ,MALlB,uCAOHb,QAAQO,MAAR,MAPG,kBAQI,IARJ,gF","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","constants/api.js","pages/Home/Home.jsx","services/fetchApi.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n`;\n\nexport const CardWrapper = styled.div`\n  position: relative;\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const ImgPoster = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const MovieTitle = styled.h3`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding-bottom: 10px;\n  color: white;\n  background: linear-gradient(to top, rgba(0, 0, 0, 0.9), rgba(0, 0, 0, 0));\n  text-align: center;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport {\n  Container,\n  CardWrapper,\n  ImgPoster,\n  MovieTitle,\n} from './MoviesList.styled';\n\nimport { IMG_MEDIUM_URL } from 'constants/api';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Container>\n      {movies.map(movie => (\n        <CardWrapper key={movie.id}>\n          <Link to={`${movie.id}`} state={{ from: location }}>\n            <ImgPoster\n              src={\n                movie.poster_path\n                  ? `${IMG_MEDIUM_URL}${movie.poster_path}`\n                  : 'https://via.placeholder.com/200x300'\n              }\n              width=\"200\"\n              height=\"300\"\n              alt={movie.title}\n            />\n            <MovieTitle>{movie.title}</MovieTitle>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n\nexport default MovieList;\n","export const API_KEY = 'e228a48ce493c266d1ac0e25cdb4d9c4';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const IMG_SMALL_URL = 'https://image.tmdb.org/t/p/w200/';\nexport const IMG_MEDIUM_URL = 'https://image.tmdb.org/t/p/w500/';\nexport const IMG_LARGE_URL = 'https://image.tmdb.org/t/p/original/';\n\nexport const URL_TREND_DAY = 'trending/movie/day';\nexport const URL_TREND_WEEK = 'trending/movie/week';\nexport const URL_GENRE_LIST = 'genre/movie/list';\nexport const URL_COUNTRY_LIST = 'configuration/countries';\nexport const URL_SEARCH_MOVIE = 'search/movie';\n","import { useState, useEffect } from 'react';\nimport MovieList from 'components/MoviesList';\nimport { getTrendMoviesOfDay } from 'services/fetchApi';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const res = await getTrendMoviesOfDay();\n        console.log(res);\n        setMovies(res);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetchMovies();\n  }, []);\n\n  return (\n    <main>\n      <h1>Welcome</h1>\n      <img src=\"https://via.placeholder.com/960x240\" alt=\"\" />\n      <MovieList movies={movies} />\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nimport {\n  API_KEY,\n  BASE_URL,\n  URL_TREND_DAY,\n  URL_TREND_WEEK,\n  URL_SEARCH_MOVIE,\n} from 'constants/api';\n\n// Function to fetch trending movies of the day from TMDB API\nexport async function getTrendMoviesOfDay() {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}${URL_TREND_DAY}?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// Function to fetch trending movies of the week from TMDB API\nexport async function getTrendMoviesOfWeek() {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}${URL_TREND_WEEK}?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// Function to fetch movie details from TMDB API\nexport async function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// Function to search movies by keyword from TMDB API\nexport async function searchMoviesByKeyword(keyword) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}${URL_SEARCH_MOVIE}?api_key=${API_KEY}&query=${keyword}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport async function getMovieCredits(movieId) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error(error);\n    return [];\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":["Container","styled","CardWrapper","ImgPoster","MovieTitle","movies","location","useLocation","map","movie","to","id","state","from","src","poster_path","IMG_MEDIUM_URL","width","height","alt","title","API_KEY","BASE_URL","IMG_SMALL_URL","IMG_LARGE_URL","URL_TREND_DAY","URL_SEARCH_MOVIE","useState","setMovies","useEffect","fetchMovies","getTrendMoviesOfDay","res","console","log","message","axios","response","data","results","error","fetchMovieDetails","movieId","searchMoviesByKeyword","keyword","getMovieCredits","cast"],"sourceRoot":""}